# Stage 1: Build the React application
FROM node:16-alpine AS build

# Set the working directory in the container
WORKDIR /app

# Copy package.json and yarn.lock separately to leverage Docker cache
COPY package*.json yarn.lock* ./

# Install dependencies
RUN npm install --legacy-peer-deps

# Copy the rest of the application code
COPY . .

# Build the React application
RUN npm run build

# Stage 2: Serve the application with Nginx and Cloudflared
FROM nginx:alpine

# Copy the build output to the Nginx html directory
COPY --from=build /app/build /usr/share/nginx/html

# Copy the main Nginx configuration file
COPY nginx.conf /etc/nginx/nginx.conf

# Copy the SSL certificates
COPY certificates /etc/nginx/certificates

# Download and install Cloudflared
RUN wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 && \
    mv cloudflared-linux-amd64 /usr/local/bin/cloudflared && \
    chmod +x /usr/local/bin/cloudflared

# Expose the ports the app runs on
EXPOSE 80
EXPOSE 443


# Command to run Nginx and Cloudflared
CMD ["sh", "-c", "nginx -g 'daemon off;' & cloudflared tunnel run --token $TUNNEL_TOKEN"]
